ll get_count(ll A, ll B, ll C, ll X);

ll s1(ll X) {
  if (X % 2 == 0) {
    return X / 2 * (X + 1);
  } else {
    return (X + 1) / 2 * X;
  }
}


// A * x + B * y <= C
// 0 <= x <= X
ll get_count(ll A, ll B, ll C) {
  assert(A > 0 && B > 0);
  if (C < 0) return 0;
  
  if (A < B) swap(A, B);

  ll U = A / B;
  ll V = A % B;

  return get_count(V, B, C, C / A) - U * s1(C / A);
}


// A * x + B * y <= C
// 0 <= x <= X
ll get_count(ll A, ll B, ll C, ll X) {
  assert(B > 0);
  if (C < 0) return 0;
  if (A == 0) {
    return (C / B + 1) * (X + 1);
  }
  if (A * (X + 1) > C) {
    return get_count(A, B, C);
  }

  ll Y = (C - A * X) / B;
  C -= Y * B;

  assert(A * X + B > C);

  if (A * (X + 1) > C) {
    return (X + 1) * Y + get_count(A, B, C);
  } else {
    return (X + 1) * Y + get_count(A, B, C) - (C / A - X);
  }
}

// A * x + B * y <= C
// 0 <= x <= X, 0 <= y <= Y
ll get_count(ll A, ll B, ll C, ll X, ll Y) {
  if (C < 0) return 0;

  if (A == 0 || B == 0) {
    if (A) X = min(X, C / A);
    if (B) Y = min(Y, C / B);
    return (X + 1) * (Y + 1);
  }

  //inclusion-exclusion
  return get_count(A, B, C, X) + get_count(B, A, C, Y) + get_count(A, B, C - A * (X + 1) - B * (Y + 1)) - get_count(A, B, C);
}

ll stupid_count(ll A, ll B, ll C, ll X, ll Y) {
  ll res = 0;
  for (ll x = 0; x <= X; ++x) {
    for (ll y = 0; y <= Y; ++y) {
      if (A * x + B * y <= C) {
        res++;
      }
    }
  }
  return res;
}
