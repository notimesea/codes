#ifdef LOCAL

#include <stdint.h>
#include <inttypes.h>
#include <sys/resource.h>

struct ___ {
    ___() {
        rlimit R{};
        getrlimit(RLIMIT_STACK, &R);
        R.rlim_cur = R.rlim_max;
        setrlimit(RLIMIT_STACK, &R);
    }
} ___;

#endif

#include <memory>
#include <bits/stdc++.h>


#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define x first
#define y second
#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; --i)
#define for1(i, n) for(int i = 1; i <= (int)(n); ++i)

using namespace std;

#ifndef LOCAL
#define cerr while(0) cerr
#endif

#ifdef AUTO_MALLOC
namespace MALLOC { const size_t MAX_HEAP = 256 * 1000 * 1000; char buf[MAX_HEAP]; size_t ptr; }
void* operator new(size_t size) { void *result = MALLOC::buf + MALLOC::ptr; MALLOC::ptr += size; return result; }
void operator delete(void *ptr) noexcept { /* DO NOTHING */ }
#endif //AUTO_MALLOC

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
//typedef pair<long long, long long> pii;
typedef vector<long long> vll;
typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef int itn;
typedef unsigned int uint;

const ld PI = 3.1415926535897932384626433832795L;

template<class T>
bool uin(T &, const T &);

template<class T>
bool uax(T &, const T &);

template<class T>
T gcd(T, T);

template<class T>
T lcm(T, T);

template<class _T>
inline string tostr(const _T &);

template<typename T>
void input(T &);

template<typename T = long long>
T nxt();

bool checkp(long long);

template<typename T>
T pw(T a, T n, T m);

template<typename T>
T inv(T a, T p);

template<class _T>
_T sqr(const _T &x);

void pre() {}

int TTT;

const int N = 1000000;

int lp[N + 1];

vector<long long> primes;
vector <long long> sqprimes;

unordered_map<long long, long long> dp[N + 1];

inline long long get(long long m, int n) {
    int pos = min(n, (int)(upper_bound(all(sqprimes), m) - sqprimes.begin()) - 1);
    int add = n - pos;
    n = pos;
    if (m <= 1 || n == -1) {
        return m - add;
    }
    if (dp[n].count(m)) {
        return dp[n][m] - add;
    }

    return (dp[n][m] = get(m, n - 1) - get(m / primes[n], n - 1)) - add;
}

void prepare() {
    for (int i = 2; i <= N; ++i) {
        if (!lp[i]) {
            primes.push_back(i);
            sqprimes.push_back(i * 1ll * i);

            for (int j = i + i; j <= N; j += i) {
                lp[j] = 1;
            }
        }
    }
}

long long sqrt(long long x) {
    return sqrt(x * 1.0L) + 1e-9;
}

// https://stackoverflow.com/questions/19070911/feasible-implementation-of-a-prime-counting-function
long long get(long long x) {

    // naive version
    // return get(x, primes.size() - 1) + primes.size() - 1;

    if (x <= N) {
        return upper_bound(all(primes), x) - primes.begin();
    }

    int sqRoot = sqrt(x);
    int cbRoot = cbrt(x) + 1e-9;
    int fRoot = sqrt(sqRoot);

    int a = get(fRoot);
    int b = get(sqRoot);
    int c = get(cbRoot);

    long long sum = get(x, a - 1) + (b + a - 2ll) * (b - a + 1ll) / 2;
    for (int i = a; i < b; ++i) {
        long long w = x / primes[i];
        int lim = get(sqrt(w));
        sum -= get(w);
        if (i < c) {
            for (int j = i; j < lim; ++j) {
                sum = sum - get(w / primes[j]) + j;
            }
        }
    }

    return sum;
}

void solve(int _) {
    prepare();
    cout << get(1000000000000ll) << "\n";
}

int main(int argc, char **argv) {
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#else
#define fname "sequence"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif
    ::TTT = 1;

    pre();

    for (int test = 1; test <= ::TTT; ++test) {
        solve(test);
    }

#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class T>
T lcm(T a, T b) {
    return a / gcd(a, b) * b;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') {}
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T>
inline T nxt() {
    T res;
    input(res);
    return res;
}

void myassert(bool v) {
    assert(v);
//cout << "FAIL\n";
//exit(0);
}


bool checkp(long long v) {
    if (v < 2) return false;
    for (long long i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

template<typename T>
T pw(T a, T n, T m) {
    T res = 1;
    while (n) {
        if (n & 1) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}

template<typename T>
T inv(T a, T p) {
    T res = 1;
    while (a > 1) {
        res = res * (p - p / a) % p;
        a = p % a;
    }
    return res;
}

template<class T>
bool uin(T &a, const T &b) {
    if (b < a) {
        a = b;
        return true;
    }
    return false;
}

template<class T>
bool uax(T &a, const T &b) {
    if (b > a) {
        a = b;
        return true;
    }
    return false;
}
