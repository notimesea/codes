struct divider_32 {
    uint32_t value;
    uint32_t magic;
    uint8_t more;

    static uint32_t div_32_to_32(uint32_t u1, uint32_t u0, uint32_t v, uint32_t *r) {
        uint64_t n = ((uint64_t)u1 << 32) | u0;
        auto result = (uint32_t)(n / v);
        *r = (uint32_t)(n - result * (uint64_t)v);
        return result;
    }

    static uint32_t mullhi_u32(uint32_t x, uint32_t y) {
        uint64_t xl = x, yl = y;
        uint64_t rl = xl * yl;
        return (uint32_t) (rl >> 32u);
    }

    divider_32(uint32_t d) : value(d) {
        assert(d != 0);

        uint32_t floor_log_2_d = 31 - __builtin_clz(d);

        if ((d & (d - 1)) == 0) {
            magic = 0;
            more = (uint8_t) (floor_log_2_d);
        } else {
            uint32_t rem, proposed_m;
            proposed_m = div_32_to_32(1U << floor_log_2_d, 0, d, &rem);
            const uint32_t e = d - rem;
            proposed_m += proposed_m;
            const uint32_t twice_rem = rem + rem;
            if (twice_rem >= d || twice_rem < rem) proposed_m += 1;
            more = (uint8_t) (floor_log_2_d | 0x40);
            magic = 1 + proposed_m;
        }

        more &= 0x1F;
    }

    friend uint32_t operator/(uint32_t numer, const divider_32 &d) {
        if (!d.magic) {
            return numer >> d.more;
        }
        uint32_t q = mullhi_u32(d.magic, numer);
        uint32_t t = ((numer - q) >> 1u) + q;
        return t >> d.more;
    }

    friend uint32_t operator%(uint32_t numer, const divider_32 &d) {
        return numer - (numer / d) * d.value;
    }
};

struct divider_64 {
    uint64_t value;
    uint64_t magic;
    uint8_t more;

    static uint64_t div_64_to_64(uint64_t u1, uint64_t u0, uint64_t v, uint64_t *r) {
        __uint128_t n = ((__uint128_t)u1 << 64) | u0;
        auto result = (uint64_t)(n / v);
        *r = (uint64_t)(n - result * (__uint128_t)v);
        return result;
    }

    static uint64_t mullhi_u64(uint64_t x, uint64_t y) {
        __uint128_t xl = x, yl = y;
        __uint128_t rl = xl * yl;
        return (uint64_t)(rl >> 64);
    }

    divider_64(uint64_t d) : value(d) {
        assert(d != 0);

        uint32_t floor_log_2_d = 63 - __builtin_clzll(d);

        // Power of 2
        if ((d & (d - 1)) == 0) {
            magic = 0;
            more = (uint8_t)(floor_log_2_d);
        } else {
            uint64_t rem;
            auto proposed_m = div_64_to_64(1ULL << floor_log_2_d, 0, d, &rem);
            const auto e = d - rem;
            proposed_m += proposed_m;
            const uint64_t twice_rem = rem + rem;
            if (twice_rem >= d || twice_rem < rem) proposed_m += 1;
            more = (uint8_t)(floor_log_2_d | 0x40);
            magic = 1 + proposed_m;
        }
        more &= 0x3f;
    }

    friend uint64_t operator/(uint64_t numer, const divider_64 &d) {
        if (!d.magic) {
            return numer >> d.more;
        }
        auto q = mullhi_u64(d.magic, numer);
        auto t = ((numer - q) >> 1u) + q;
        return t >> d.more;
    }

    friend uint64_t operator%(uint64_t numer, const divider_64 &d) {
        return numer - (numer / d) * d.value;
    }
};
